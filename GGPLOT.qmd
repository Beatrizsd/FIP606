---
title: ""
---

Para visualizar graficamente os dados, é usada a função ggplot, que esta dentro do pacote tidyverse. Com o ggplot é possivel criar gráficos com diferentes configurações.
### Pacotes usados
```{r, results='hide', message=FALSE, warning=FALSE}
library(tidyverse)
library(gsheet)
```

### Carregar pacote e importar dados

```{r}
theme_set(theme_bw())
curve <- gsheet2tbl ("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit#gid=1807247585")
#aqui carregamos os dados atribuindo um nome ao objeto, que chamaremos de "curve"
```

### Definindo camadas

Com o ggplot, os gráficos são construídos em camadas que são acrescentadas a medidida que controi o gráfico. A primeira função é a "ggplot", onde é definido o conjunto de dados (o data frame onde nossos dados estão armazenados, Ex: cr) e elementos da estética.

```{r}
curve |> 
  ggplot(aes(Irrigation, severity, color = Irrigation))+
  geom_point()
#nesse caso, colocamos a irrigação no eixo x, e a severidade no eixo y. 
  
```

Dentro do conjunto de dados "curve" temos os fatores irrigação, dias e severidade. No grafico anterior, observamos a severidade em função da irrigação. Agora observaremos a severidade em função dos dias na repetição 1.

```{r}
curve |> 
  filter (rep == 1) |>
  ggplot(aes(day, severity, color = (Irrigation)))+
  geom_point()+
  geom_line()
  
```

Para observar o comportamento da severidade ao longo dos dias em cada repetição, usamos a função **facet_wrap**

```{r}
curve |> 
  ggplot(aes(day, severity, color = (Irrigation)))+
  geom_point()+
  geom_line()+
  facet_wrap(~ rep)
  
```

Observando em box plot

```{r}
curve |> 
select(Irrigation, severity) |>
  ggplot(aes(Irrigation, severity, color = (Irrigation)))+
  geom_boxplot()+
  geom_point(alpha = 0.5)
```

**Explorando outro conjunto de dados mg**

```{r}
mg <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit#gid=983033137")
```

Observando os dados em gráfico de pontos

```{r}
mg |> 
 ggplot(aes(trat, comp))+
  geom_point()
```

Agora vamos explorar os dados com gráfico de barras, usando a média o o desvio padrão

```{r}
mg |> 
  group_by(trat) |> 
  summarise(mean_comp = mean(comp),
            sd_comp = sd(comp)) |> 
  ggplot(aes(trat, mean_comp))+
  geom_col(fill = "steelblue", color = "black", width = 0.5)+
  geom_point(size = 2)+
   ylim(0, 20)+
  geom_errorbar(aes(ymin = mean_comp - sd_comp,
                    ymax = mean_comp + sd_comp),
                width = 0.02)+
  annotate(geom = "text",
           x = 1, y = 18,
           label = "*")
  
# Note que para adicionar a cor da barra preenchida, usamos a função "fill" e para adicionar a cor do contorno, usamos a função "color" dentro do geom_col. Para adicionar a barra de erro, usamos a função ""geom_errobar"
# Para fazer anotações dentro do gráfico, usamos a função "annotate" e definimos a posição da anotação nos eixos x e y e 
```

**Como colocar legenda no gráfico**

Para adicionar legenda ao gráfico, usamos a função "labs", onde definimos a legenda dos eixos x e y. Dentro da mesma função, é possível adicionar título, subtítulo e referência.

```{r}
cr <- read_csv("https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv")
```

```{r}

cr |>
  count(zone, shade) |> 
  arrange(-n) |> 
  ggplot(aes(zone, n, fill = shade))+
  geom_col()+
  coord_flip()+
  labs(x = "zona", y = "Número de fazendas",
       title = "Ferrugem do café na Etiópia",
       subtitle = "Levantamento em 405 fazendas de café",
       caption = "Belachaw et al. (2020)")+
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0,60),
                     n.breaks = 6)+
  scale_fill_grey()+
  theme(legend.position = "bottom")



  
```
